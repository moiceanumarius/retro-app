{% extends 'base.html.twig' %}

{% block title %}Action Management{% endblock %}

{% block page_title %}Action Management{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('assets/css/retrospective.css') }}">
    <style>
    .dashboard-container {
        min-height: 100vh;
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 0;
    }

    .actions-management {
        max-width: none;
        margin: 0;
        padding: 2rem;
        width: 100%;
    }

    .retrospective-header {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }

    .header-content h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0 0 0.5rem 0;
        color: #1f2937;
    }

    .header-content p {
        font-size: 1.125rem;
        color: #6b7280;
        margin: 0;
    }

    .action-stats {
        display: flex;
        gap: 1.5rem;
        align-items: center;
    }

    .stat-item {
        text-align: center;
        padding: 1rem;
        background: rgba(59, 130, 246, 0.1);
        border-radius: 12px;
        min-width: 100px;
        border: 2px solid rgba(59, 130, 246, 0.2);
    }

    .stat-number {
        display: block;
        font-size: 2rem;
        font-weight: bold;
        color: #3b82f6;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 0.875rem;
        color: #6b7280;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-weight: 600;
    }

    .action-filters {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .filter-tabs {
        display: flex;
        gap: 0.5rem;
        background: #f8fafc;
        padding: 0.5rem;
        border-radius: 10px;
    }

    .filter-tab {
        padding: 1rem 2rem;
        border: none;
        background: transparent;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.2s;
        color: #6b7280;
        font-size: 0.875rem;
    }

    .filter-tab.active,
    .filter-tab:hover {
        background: white;
        color: #374151;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transform: translateY(-1px);
    }

    .actions-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, at least 400px));
        gap: 2rem;
        grid-auto-rows: minmax(200px, auto);
    }

    .action-card {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        border-left: 5px solid #d1d5db;
        transition: all 0.3s;
        display: flex;
        flex-direction: column;
        height: fit-content;
    }

    .action-card:hover {
        box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);
        transform: translateY(-2px);
    }

    .action-card.pending {
        border-left-color: #f59e0b;
    }

    .action-card.in_progress {
        border-left-color: #3b82f6;
    }

    .action-card.completed {
        border-left-color: #10b981;
    }

    .action-card.cancelled {
        border-left-color: #6b7280;
        opacity: 0.7;
    }

    .action-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1.5rem;
        gap: 1rem;
    }

    .action-title {
        font-weight: 600;
        color: #1f2937;
        line-height: 1.5;
        flex: 1;
        font-size: 1.125rem;
    }

    .action-status-badge {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        white-space: nowrap;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .action-status-badge.pending {
        background: #fef3c7;
        color: #92400e;
    }

    .action-status-badge.in_progress {
        background: #dbeafe;
        color: #1e40af;
    }

    .action-status-badge.completed {
        background: #dcfce7;
        color: #166534;
    }

    .action-status-badge.cancelled {
        background: #f3f4f6;
        color: #374151;
    }

    .action-meta {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        font-size: 0.875rem;
        color: #6b7280;
    }

    .meta-icon {
        flex-shrink: 0;
        opacity: 0.6;
    }

    .action-controls {
        margin-top: auto;
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .status-select {
        padding: 0.75rem 1rem;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        background: white;
        font-size: 0.875rem;
        color: #374151;
        cursor: pointer;
        transition: all 0.2s;
        font-weight: 500;
    }

    .status-select:hover,
    .status-select:focus {
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        outline: none;
    }

    .no-actions {
        text-align: center;
        padding: 4rem 2rem;
        color: #6b7280;
        grid-column: 1 / -1;
        background: white;
        border-radius: 16px;
        margin: 2rem 0;
    }

    .no-actions-icon {
        opacity: 0.3;
        margin-bottom: 2rem;
        color: #9ca3af;
    }

    .no-actions h3 {
        margin: 0 0 1rem 0;
        color: #374151;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .no-actions p {
        margin: 0;
        font-size: 1rem;
        color: #6b7280;
        line-height: 1.6;
    }

    @media (max-width: 1024px) {
        .actions-container {
            grid-template-columns: 1fr;
        }
        
        .retrospective-header {
            flex-direction: column;
            gap: 2rem;
        }
        
        .action-stats {
            flex-wrap: wrap;
            justify-content: center;
        }
    }

    @media (max-width: 768px) {
        .actions-management {
            padding: 1rem;
        }
        
        .dashboard-container {
            padding: 0;
        }
        
        .retrospective-header {
            padding: 1.5rem;
        }
        
        .header-content h1 {
            font-size: 2rem;
        }
        
        .action-stats {
            gap: 1rem;
            flex-wrap: wrap;
        }
        
        .stat-item {
            min-width: 80px;
            padding: 0.875rem;
        }
        
        .stat-number {
            font-size: 1.75rem;
        }
        
        .filter-tabs {
            flex-wrap: wrap;
        }
        
        .filter-tab {
            flex: 1;
            min-width: auto;
            text-align: center;
        }
        
        .action-card {
            padding: 1.5rem;
        }
        
        .actions-container {
            gap: 1rem;
        }
    }
    </style>
{% endblock %}

{% block body %}
<div class="dashboard-container">
    <div class="actions-management">
        <!-- Header Section -->
        <div class="retrospective-header">
            <div class="header-content">
                <h1>Action Management</h1>
                <p>Manage and track action items from retrospectives</p>
            </div>
            <div class="header-actions">
                <div class="action-stats" id="actionStats">
                    <div class="stat-item">
                        <span class="stat-number">{{ actions|length }}</span>
                        <span class="stat-label">Total</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">{{ groupedActions.pending|length }}</span>
                        <span class="stat-label">Pending</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">{{ groupedActions.in_progress|length }}</span>
                        <span class="stat-label">In Progress</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">{{ groupedActions.completed|length }}</span>
                        <span class="stat-label">Completed</span>
                    </span>
                </div>
            </div>
        </div>

        <!-- Filters -->
        <div class="action-filters">
            <div class="filter-tabs">
                <button class="filter-tab active" data-filter="all">All Actions</button>
                <button class="filter-tab" data-filter="pending">Pending</button>
                <button class="filter-tab" data-filter="in_progress">In Progress</button>
                <button class="filter-tab" data-filter="completed">Completed</button>
                <button class="filter-tab" data-filter="cancelled">Cancelled</button>
            </div>
        </div>

        <!-- Actions Grid -->
        <div class="actions-container">
            {% for status, statusActions in groupedActions %}
                {% for action in statusActions %}
                    <div class="action-card {{ action.status }}" data-status="{{ action.status }}"
                         data-action-id="{{ action.id }}">
                        <div class="action-header">
                            <div class="action-title">{{ action.description }}</div>
                            <div class="action-status-badge {{ action.status }}">
                                {{ action.status|title }}
                            </div>
                        </div>
                        
                        <div class="action-content">
                            <div class="action-meta">
                                <div class="meta-item">
                                    <svg class="meta-icon" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                                    </svg>
                                    <span>
                                        {% if action.assignedTo %}
                                            {{ action.assignedTo.firstName }} {{ action.assignedTo.lastName }}
                                        {% else %}
                                            Unassigned
                                        {% endif %}
                                    </span>
                                </div>
                                
                                {% if action.dueDate %}
                                <div class="meta-item">
                                    <svg class="meta-icon" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                                    </svg>
                                    <span>{{ action.dueDate|date('M d, Y') }}</span>
                                </div>
                                {% endif %}
                                
                                <div class="meta-item">
                                    <svg class="meta-icon" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                        <circle cx="12" cy="12" r="10"/>
                                        <path d="M12 6v6l4 2"/>
                                    </svg>
                                    <span>{{ action.retrospective.title }}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="action-actions">
                            {% if action.assignedTo == app.user or app.user.hasAnyRole(['ROLE_ADMIN', 'ROLE_TEAM_LEAD', 'ROLE_FACILITATOR']) %}
                                <div class="action-controls">
                                    <select class="status-select" data-action-id="{{ action.id }}">
                                        <option value="pending" {% if action.status == 'pending' %}selected{% endif %}>Pending</option>
                                        <option value="in_progress" {% if action.status == 'in_progress' %}selected{% endif %}>In Progress</option>
                                        <option value="completed" {% if action.status == 'completed' %}selected{% endif %}>Completed</option>
                                        <option value="cancelled" {% if action.status == 'cancelled' %}selected{% endif %}>Cancelled</option>
                                    </select>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                {% endfor %}
            {% endfor %}

            {% if actions|length == 0 %}
                <div class="no-actions">
                    <svg class="no-actions-icon" width="64" height="64" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    <h3>No Actions Found</h3>
                    <p>You don't have any action items yet. Actions are created during retrospectives.</p>
                </div>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Filter functionality
    const filterTabs = document.querySelectorAll('.filter-tab');
    const actionCards = document.querySelectorAll('.action-card');

    filterTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            const filter = this.dataset.filter;
            
            // Update active tab
            filterTabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            
            // Filter cards
            actionCards.forEach(card => {
                if (filter === 'all' || card.dataset.status === filter) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    });

    // Status update functionality
    const statusSelects = document.querySelectorAll('.status-select');
    
    statusSelects.forEach(select => {
        select.addEventListener('change', function() {
            const actionId = this.dataset.actionId;
            const newStatus = this.value;
            
            fetch(`/actions/${actionId}/update-status`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ status: newStatus }),
                credentials: 'include'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update UI
                    const actionCard = document.querySelector(`[data-action-id="${actionId}"]`);
                    actionCard.classList.remove('pending', 'in_progress', 'completed', 'cancelled');
                    actionCard.classList.add(newStatus);
                    actionCard.dataset.status = newStatus;
                    
                    // Update status badge
                    const statusBadge = actionCard.querySelector('.action-status-badge');
                    statusBadge.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                    statusBadge.classList.remove('pending', 'in_progress', 'completed', 'cancelled');
                    statusBadge.classList.add(newStatus);
                    
                    // Show success message
                    showMessage('Action status updated successfully!', 'success');
                } else {
                    showMessage(data.message || 'Failed to update action status', 'error');
                }
            })
            .catch(error => {
                console.error('Error updating action status:', error);
                showMessage('Failed to update action status', 'error');
            });
        });
    });
    
    function showMessage(message, type) {
        // Remove any existing messages
        document.querySelectorAll('.action-message').forEach(msg => msg.remove());
        
        // Create message element
        const messageEl = document.createElement('div');
        messageEl.className = `action-message ${type}`;
        messageEl.textContent = message;
        messageEl.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            z-index: 1000;
            color: white;
            background: ${type === 'success' ? '#10b981' : '#ef4444'};
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            font-size: 0.875rem;
        `;
        
        document.body.appendChild(messageEl);
        
        // Auto remove after 3 seconds
        setTimeout(() => {
            messageEl.remove();
        }, 3000);
    }
});
</script>
{% endblock %}
