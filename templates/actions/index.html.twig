{% extends 'base.html.twig' %}

{% block title %}Actions{% if team %} - {{ team.name }}{% endif %}{% endblock %}
{% block page_title %}Action Management{% if team %} - {{ team.name }}{% endif %}{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('assets/css/team-management.css') }}">
    <style>
        /* Action-specific styles */
        .actions-management {
            padding: 0;
            max-width: 1400px;
            margin: 0 auto;
        }

        .page-header {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 20px rgba(0,0,0,0.08);
            padding: 2rem;
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-left h1 {
            font-size: 2rem;
            font-weight: 700;
            color: #1f2937;
            margin: 0 0 0.5rem 0;
        }

        .header-left p {
            color: #6b7280;
            margin: 0;
            font-size: 1rem;
        }

        .header-actions .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.2s ease;
            text-decoration: none;
        }

        /* Actions Dropdown Styles */
        .actions-dropdown {
            position: relative;
            display: inline-block;
        }

        .actions-dropdown-toggle {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .actions-dropdown-toggle:hover {
            background: #5a6268;
            transform: translateY(-1px);
        }

        .dropdown-arrow {
            transition: transform 0.2s ease;
        }

        .actions-dropdown-toggle.active .dropdown-arrow {
            transform: rotate(180deg);
        }

        .actions-dropdown-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            min-width: 200px;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.2s ease;
        }

        .actions-dropdown-menu.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .dropdown-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 1rem;
            color: #374151;
            text-decoration: none;
            font-size: 0.875rem;
            transition: all 0.2s ease;
            border-bottom: 1px solid #f3f4f6;
        }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        .dropdown-item:hover {
            background: #f9fafb;
            color: #1f2937;
        }

        .dropdown-item svg {
            width: 16px;
            height: 16px;
            color: #6b7280;
        }

        .page-content {
            padding: 0;
        }

        .filters-section {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 20px rgba(0,0,0,0.08);
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .filters-grid {
            display: grid;
            grid-template-columns: auto auto auto auto 2fr auto;
            gap: 1rem;
            align-items: center;
        }

        .filter-label {
            font-weight: 600;
            color: #495057;
            font-size: 0.875rem;
        }

        .filter-dropdown {
            min-width: 120px;
            max-width: 140px;
            padding: 0.75rem;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 0.875rem;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        /* Custom Dropdown with Checkboxes */
        .custom-dropdown {
            position: relative;
            display: inline-block;
            min-width: 140px;
            max-width: 180px;
        }

        .custom-dropdown-toggle {
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.75rem;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 0.875rem;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .custom-dropdown-toggle:hover {
            border-color: #667eea;
        }

        .custom-dropdown-toggle.active {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .custom-dropdown-menu {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.2s ease;
            max-height: 200px;
            overflow-y: auto;
        }

        .custom-dropdown-menu.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            padding: 0.75rem;
            cursor: pointer;
            transition: background-color 0.2s ease;
            border-bottom: 1px solid #f3f4f6;
        }

        .checkbox-item:last-child {
            border-bottom: none;
        }

        .checkbox-item:hover {
            background: #f9fafb;
        }

        .checkbox-item input[type="checkbox"] {
            display: none;
        }

        .checkmark {
            width: 18px;
            height: 18px;
            border: 2px solid #d1d5db;
            border-radius: 4px;
            margin-right: 0.75rem;
            position: relative;
            transition: all 0.2s ease;
            flex-shrink: 0;
        }

        .checkbox-item input[type="checkbox"]:checked + .checkmark {
            background: #667eea;
            border-color: #667eea;
        }

        .checkbox-item input[type="checkbox"]:checked + .checkmark::after {
            content: '';
            position: absolute;
            left: 5px;
            top: 2px;
            width: 4px;
            height: 8px;
            border: solid white;
            border-width: 0 2px 2px 0;
            transform: rotate(45deg);
        }

        .checkbox-text {
            font-size: 0.875rem;
            color: #374151;
            flex: 1;
        }

        .filter-dropdown:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .search-box {
            padding: 0.75rem 1rem;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 0.875rem;
            transition: all 0.3s ease;
            background: white;
        }

        .search-box:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .clear-filters-btn {
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .clear-filters-btn:hover {
            background: #5a6268;
            transform: translateY(-1px);
        }

        .actions-table-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 20px rgba(0,0,0,0.08);
            overflow: hidden;
        }

        .actions-table {
            width: 100%;
            border-collapse: collapse !important;
            border-spacing: 0 !important;
            border: none !important;
            outline: none !important;
        }

        .actions-table * {
            border-color: transparent !important;
        }

        .actions-table,
        .actions-table th,
        .actions-table td {
            border-style: none !important;
        }

        .actions-table thead {
            background: #f8f9fa;
        }

        .actions-table th {
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #495057;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-bottom: 2px solid #e9ecef !important;
            border-left: none !important;
            border-right: none !important;
            border-top: none !important;
            position: relative;
            box-shadow: none !important;
            background-clip: border-box !important;
            vertical-align: middle;
            min-height: 48px;
        }

        .actions-table th.sortable {
            cursor: pointer;
            user-select: none;
            text-align: center !important;
        }

        .actions-table th:first-child {
            border-left: none !important;
        }

        .actions-table th:last-child {
            border-right: none !important;
        }

        /* Override any Bootstrap table styling */
        table.actions-table th,
        table.actions-table td {
            /* Allow vertical borders for column separation */
        }

        .actions-table thead tr th {
            border: none !important;
            border-bottom: 2px solid #e9ecef !important;
            border-left: 1px solid #e5e7eb !important;
            border-right: 1px solid #e5e7eb !important;
        }

        .actions-table td {
            padding: 1rem;
            border-bottom: 1px solid #d1d5db !important;
            border-left: 1px solid #e5e7eb !important;
            border-right: 1px solid #e5e7eb !important;
            border-top: none !important;
            vertical-align: top;
            outline: none !important;
            box-shadow: none !important;
        }

        .actions-table td:first-child {
            border-left: none !important;
        }

        .actions-table td:last-child {
            border-right: none !important;
        }

        /* Additional aggressive border removal */
        .actions-table thead tr,
        .actions-table thead tr td,
        .actions-table thead tr th {
            border-collapse: collapse !important;
        }

        .actions-table tbody tr {
            transition: all 0.3s ease;
        }

        .actions-table tbody tr:hover {
            background: #f8fafc;
        }

        /* Reviewed actions background */
        .actions-table tbody tr.reviewed {
            background: linear-gradient(135deg, #f0fdf4, #dcfce7);
        }

        .actions-table tbody tr.reviewed:hover {
            background: linear-gradient(135deg, #ecfdf5, #d1fae5);
        }

        .actions-table tbody tr:last-child td {
            border-bottom: none;
        }

        .action-id {
            font-weight: 600;
            color: #6c757d;
            font-size: 0.8rem;
        }

        .action-description {
            color: #2d3748;
            font-weight: 500;
            font-size: 0.875rem;
            line-height: 1.6;
            max-width: 300px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .action-description:hover {
            border: 1px dashed #d1d5db;
        }

        .action-description-container {
            position: relative;
        }

        .action-edit-form {
            position: relative;
            margin-top: 0.5rem;
        }

        .action-edit-textarea {
            width: 100%;
            min-width: 300px;
            padding: 0.75rem;
            border: 2px solid #667eea;
            border-radius: 8px;
            font-size: 0.875rem;
            font-family: inherit;
            resize: vertical;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .action-edit-textarea:focus {
            outline: none;
            border-color: #5a67d8;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .action-edit-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .save-action-btn {
            background: #10b981;
            color: white;
            border: none;
            transition: all 0.3s ease;
        }

        .save-action-btn:hover {
            background: #6dc865;
            transform: translateY(-1px);
        }

        .cancel-action-btn {
            background: #6c757d;
            color: white;
            border: none;
            transition: all 0.3s ease;
        }

        .cancel-action-btn:hover {
            background: #545b62;
            transform: translateY(-1px);
        }

        .assignee-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .assignee-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            font-weight: 600;
            color: #6c757d;
        }

        .assignee-name {
            color: #495057;
            font-weight: 500;
            font-size: 0.875rem;
        }

        .due-date {
            font-size: 0.875rem;
            font-weight: 500;
        }

        .due-date.overdue {
            color: #e53e3e;
        }

        .due-date.due-soon {
            color: #d69e2e;
        }

        .due-date.normal {
            color: #38a169;
        }


        .action-actions {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            align-items: center;
        }

        .status-badge {
            padding: 0.375rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-badge.pending {
            background: #64748b;
            color: white;
        }

        .status-badge.open {
            background: #ff6b6b;
            color: white;
        }    

        .status-badge.in-progress {
            background: #ffd93d;
            color: #744210;
        }

        .status-badge.completed {
            background: #6bcf7f;
            color: white;
        }

        .status-badge.cancelled {
            background: #94a3b8;
            color: white;
        }

        /* Action Details Button */
        .action-details-btn {
            background: #667eea;
            color: white;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .action-details-btn:hover {
            background: #5a67d8;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

        .action-delete-btn {
            background: #ef4444;
            color: white;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .action-delete-btn:hover {
            background: #dc2626;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
        }

        /* Confirmation Modal Styles */
        .confirm-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .confirm-modal.active {
            opacity: 1;
            visibility: visible;
        }

        .confirm-modal-content {
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            max-width: 400px;
            width: 90%;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .confirm-modal.active .confirm-modal-content {
            transform: scale(1);
        }

        .confirm-modal-header {
            display: flex;
            align-items: center;
            padding: 1.5rem 1.5rem 1rem 1.5rem;
            border-bottom: 1px solid #e5e7eb;
        }

        .confirm-modal-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #fef3cd;
            color: #856404;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            font-weight: bold;
            margin-right: 1rem;
        }

        .confirm-modal-title {
            margin: 0;
            font-size: 1.125rem;
            font-weight: 600;
            color: #111827;
        }

        .confirm-modal-body {
            padding: 1rem 1.5rem;
            color: #6b7280;
            line-height: 1.5;
        }

        .confirm-modal-footer {
            padding: 1rem 1.5rem 1.5rem 1.5rem;
            display: flex;
            gap: 0.75rem;
            justify-content: flex-end;
        }

        .confirm-modal-btn {
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
        }

        .confirm-modal-btn-cancel {
            background: #f3f4f6;
            color: #374151;
        }

        .confirm-modal-btn-cancel:hover {
            background: #e5e7eb;
        }

        .confirm-modal-btn-confirm {
            background: #ef4444;
            color: white;
        }

        .confirm-modal-btn-confirm:hover {
            background: #dc2626;
        }

        /* Action Details Modal */
        .action-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .action-modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }

        .action-modal-content {
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
            max-width: 750px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .action-modal-overlay.show .action-modal-content {
            transform: scale(1);
        }

        .action-modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .action-modal-header h3 {
            margin: 0;
            color: #1f2937;
            font-size: 1.25rem;
            font-weight: 600;
        }

        .action-modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: #6b7280;
            cursor: pointer;
            padding: 0;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .action-modal-close:hover {
            background-color: #f3f4f6;
            color: #374151;
        }

        .action-modal-body {
            padding: 1.5rem;
        }

        .action-detail-group {
            margin-bottom: 1.5rem;
        }

        .action-detail-group:last-child {
            margin-bottom: 0;
        }

        .action-detail-label {
            font-weight: 600;
            color: #374151;
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
            display: block;
        }

        .action-detail-value {
            color: #1f2937;
            line-height: 1.5;
        }

        .action-description-view {
            cursor: pointer;
            padding: 1rem;
            border-radius: 8px;
            background: #f9fafb;
            border: 1px dashed #cbd5e0;
            transition: all 0.2s ease;
            position: relative;
        }

        .action-description-view:hover {
            background: #e2e8f0;
            border-color: #667eea;
        }


        .action-description-edit {
            margin-top: 0.5rem;
        }

        .status-badge-view {
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
            transition: all 0.2s ease;
            background: rgba(255, 255, 255, 0.7);
            border: 1px solid transparent;
        }

        .status-badge-view:hover {
            background: rgba(255, 255, 255, 0.9);
            border-color: #667eea;
            transform: translateY(-1px);
        }

        .status-edit-form {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .status-edit-form .status-select {
            padding: 0.375rem 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            background: white;
            font-size: 0.875rem;
            min-width: 120px;
        }

        .cancel-status-btn {
            padding: 0.375rem;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        /* Due Date Editing Styles */
        .due-date-view {
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
            transition: all 0.2s ease;
            background: rgba(255, 255, 255, 0.7);
            border: 1px solid transparent;
        }

        .due-date-view:hover {
            background: rgba(255, 255, 255, 0.9);
            border-color: #667eea;
            transform: translateY(-1px);
        }

        .due-date-edit-form {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .due-date-edit-form .due-date-input {
            padding: 0.375rem 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            background: white;
            font-size: 0.875rem;
            min-width: 140px;
        }

        .due-date-edit-form .btn {
            padding: 0.375rem;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        /* Assignee Editing Styles */
        .assignee-view {
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .assignee-view:hover {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 0.25rem;
            margin: -0.25rem;
        }

        .assignee-edit-form {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .assignee-edit-form .assignee-select {
            padding: 0.375rem 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            background: white;
            font-size: 0.875rem;
            min-width: 200px;
            flex: 1;
        }

        .assignee-edit-form .btn {
            padding: 0.375rem;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        /* Created At Column Styling */
        .created-at-cell {
            width: 150px;
            text-align: left;
        }

        .created-at-text {
            font-size: 0.875rem;
            color: #374151;
            font-weight: 500;
        }

        /* Sorting Styles */
        .sortable {
            position: relative;
            user-select: none;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .sortable:hover {
            background: rgba(102, 126, 234, 0.05);
        }

        .header-content {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            width: 100%;
        }

        .header-text {
            flex: 1;
            white-space: nowrap;
        }

        .sort-icon {
            transition: all 0.2s ease;
            stroke: #9ca3af;
            flex-shrink: 0;
        }

        .sortable:hover .sort-icon {
            stroke: #667eea;
        }

        .sortable.active .sort-icon {
            stroke: #667eea;
        }

        .sortable.sort-desc .sort-icon {
            transform: rotate(180deg);
        }

        .sortable.sort-asc .sort-icon {
            transform: rotate(0deg);
        }

        /* Pagination Styles */
        .pagination-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
            padding: 1rem 0;
            border-top: 1px solid #e5e7eb;
        }

        .pagination-info {
            font-size: 0.875rem;
            color: #6b7280;
        }

        .pagination-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .pagination-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: #667eea;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.2s ease;
            border: none;
        }

        .pagination-btn:hover {
            background: #5a67d8;
            transform: translateY(-1px);
        }

        .pagination-btn.pagination-disabled {
            background: #d1d5db;
            color: #9ca3af;
            cursor: not-allowed;
            transform: none;
        }

        .pagination-pages {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .pagination-page {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            border-radius: 6px;
            text-decoration: none;
            font-size: 0.875rem;
            font-weight: 500;
            color: #667eea;
            background: #f8fafc;
            border: 1px solid #e5e7eb;
            transition: all 0.2s ease;
        }

        .pagination-page:hover {
            background: #667eea;
            color: white;
            transform: translateY(-1px);
        }

        .pagination-page.pagination-active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .pagination-ellipsis {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            color: #9ca3af;
            font-weight: 500;
        }

        .pagination-size {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .pagination-size label {
            font-size: 0.875rem;
            color: #6b7280;
            font-weight: 500;
        }

        .pagination-size select {
            padding: 0.375rem 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            background: white;
            font-size: 0.875rem;
            color: #374151;
        }

        .pagination-size select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        /* Mobile Responsiveness for Pagination */
        @media (max-width: 768px) {
            .pagination-container {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .pagination-controls {
                order: -1;
                justify-content: center;
            }

            .pagination-pages {
                gap: 0.125rem;
            }

            .pagination-page {
                width: 28px;
                height: 28px;
                font-size: 0.75rem;
            }
        }

        .action-description-detail {
            background: #f9fafb;
            border-radius: 8px;
            padding: 1rem;
            font-style: italic;
            margin-bottom: 1rem;
        }

        .action-assignee-detail {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 1rem;
            background: #f9fafb;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
        }

        .action-assignee-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #667eea;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 1rem;
        }

        .action-assignee-info {
            flex: 1;
        }

        .action-assignee-name {
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.25rem;
        }

        .action-assignee-role {
            font-size: 0.875rem;
            color: #6b7280;
        }

        .action-metadata {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .action-metadata-item {
            background: #f9fafb;
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
        }

        .action-metadata-item .label {
            font-size: 0.75rem;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 0.5rem;
        }

        .action-metadata-item .value {
            font-weight: 600;
            color: #1f2937;
        }


        .actions-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .team-context {
            background: #f0f4ff;
            border: 1px solid #e0e7ff;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            color: #3730a3;
            font-weight: 500;
        }

        .switch-team-link {
            color: #667eea;
            text-decoration: none;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .switch-team-link:hover {
            color: #5a67d8;
            text-decoration: underline;
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 20px rgba(0,0,0,0.08);
        }

        .empty-state-icon {
            color: #cbd5e0;
            margin-bottom: 1.5rem;
        }

        .empty-state h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2d3748;
            margin: 0 0 0.5rem 0;
        }

        .empty-state p {
            color: #64748b;
            margin: 0 0 2rem 0;
        }

        /* Stats Cards */
        .stats-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 20px rgba(0,0,0,0.08);
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 25px rgba(0,0,0,0.15);
        }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            flex-shrink: 0;
        }

        .stat-card.total .stat-icon {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .stat-card.pending .stat-icon {
            background: linear-gradient(135deg, #64748b 0%, #475569 100%);
        }

        .stat-card.in-progress .stat-icon {
            background: linear-gradient(135deg, #ffd93d 0%, #f6ad55 100%);
        }

        .stat-card.completed .stat-icon {
            background: linear-gradient(135deg, #6bcf7f 0%, #48bb78 100%);
        }

        .stat-card.overdue .stat-icon {
            background: linear-gradient(135deg, #e53e3e 0%, #c53030 100%);
        }

        .stat-card.reviewed .stat-icon {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .stat-content h3 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #2d3748;
            margin: 0;
        }

        .stat-content p {
            color: #64748b;
            font-size: 0.875rem;
            margin: 0.25rem 0 0 0;
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .filters-grid {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }

            .filter-label,
            .filter-dropdown,
            .search-box,
            .clear-filters-btn {
                width: 100%;
            }

            .custom-dropdown {
                min-width: 100%;
                max-width: 100%;
            }

            .actions-table {
                font-size: 0.8rem;
            }

            .actions-table th,
            .actions-table td {
                padding: 0.75rem 0.5rem;
            }

            .action-description {
                max-width: 200px;
            }

            .stats-row {
                grid-template-columns: 1fr;
            }

            .actions-header {
                flex-direction: column;
                align-items: flex-start;
            }
        }
    </style>
{% endblock %}

{% block body %}
<!-- Actions Management Page -->
<div class="actions-management">
    <!-- Header Section -->
    <div class="page-header">
        <div class="header-left">
            <h1>Action Management{% if team %} - {{ team.name }}{% endif %}</h1>
            <p>Track and manage action items from retrospectives{% if team %} for {{ team.name }}{% endif %}</p>
        </div>
        <div class="header-actions">
            <div class="actions-dropdown">
                <button class="btn btn-secondary actions-dropdown-toggle" onclick="toggleActionsDropdown()">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                    </svg>
                    Actions
                    <svg width="14" height="14" fill="currentColor" viewBox="0 0 20 20" class="dropdown-arrow">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
                <div class="actions-dropdown-menu" id="actionsDropdown">
                    <a href="#" onclick="resetReviewedActions(); return false;" class="dropdown-item">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path>
                        </svg>
                        Reset Reviewed Actions
                    </a>
                    {% if team %}
                        <a href="{{ path('app_actions_team_selection') }}" class="dropdown-item">
                            <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M3 7a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 11a1 1 0 011-1h6a1 1 0 110 2H4a1 1 0 01-1-1zM14 15a1 1 0 00-1-1H4a1 1 0 00-1 1v1a1 1 0 001 1h10a1 1 0 001-1v-1z" clip-rule="evenodd"></path>
                            </svg>
                            Switch Team
                        </a>
                    {% else %}
                        <a href="{{ path('app_actions_team_selection') }}" class="dropdown-item">
                            <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"></path>
                            </svg>
                            Select Team
                        </a>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <div class="page-content">

    {% if actions|length > 0 %}
        <!-- Stats Overview -->
        <div class = "stats-row">
            {% set totalActions = (statusStats['pending'] ?? 0) + (statusStats['in-progress'] ?? 0) + (statusStats['completed'] ?? 0) + (statusStats['cancelled'] ?? 0) %}
            {% set pendingActions = statusStats['pending'] ?? 0 %}
            {% set inProgressActions = statusStats['in-progress'] ?? 0 %}
            {% set completedActions = statusStats['completed'] ?? 0 %}
            {% set overdueActions = statusStats['overdue'] ?? 0 %}

            <div class="stat-card total">
                <div class="stat-icon">
                    <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div class="stat-content">
                    <h3>{{ totalActions }}</h3>
                    <p>Total Actions</p>
                </div>
            </div>

            <div class="stat-card pending">
                <div class="stat-icon">
                    <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div class="stat-content">
                    <h3>{{ pendingActions }}</h3>
                    <p>Pending</p>
                </div>
            </div>

            <div class="stat-card in-progress">
                <div class="stat-icon">
                    <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.293l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div class="stat-content">
                    <h3>{{ inProgressActions }}</h3>
                    <p>In Progress</p>
                </div>
            </div>

            <div class="stat-card completed">
                <div class="stat-icon">
                    <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div class="stat-content">
                    <h3>{{ completedActions }}</h3>
                    <p>Completed</p>
                </div>
            </div>

            <div class="stat-card overdue">
                <div class="stat-icon">
                    <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div class="stat-content">
                    <h3>{{ overdueActions }}</h3>
                    <p>Overdue</p>
                </div>
            </div>

            <div class="stat-card reviewed">
                <div class="stat-icon">
                    <svg width="24" height="24" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div class="stat-content">
                    <h3>{{ actions|filter(action => action.isReviewed)|length }}</h3>
                    <p>Reviewed</p>
                </div>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="filters-section">
            <div class="filters-grid">
                <label class="filter-label">Status:</label>
                <div class="custom-dropdown" id="statusDropdown">
                    <button class="custom-dropdown-toggle" id="statusDropdownToggle" onclick="toggleStatusDropdown()">
                        <span id="statusDropdownText">All Status</span>
                        <svg width="14" height="14" fill="currentColor" viewBox="0 0 20 20" class="dropdown-arrow">
                            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                    <div class="custom-dropdown-menu" id="statusDropdownMenu">
                        <label class="checkbox-item">
                            <input type="checkbox" value="pending" onchange="updateStatusFilter()">
                            <span class="checkmark"></span>
                            <span class="checkbox-text">Pending</span>
                        </label>
                        <label class="checkbox-item">
                            <input type="checkbox" value="in-progress" onchange="updateStatusFilter()">
                            <span class="checkmark"></span>
                            <span class="checkbox-text">In Progress</span>
                        </label>
                        <label class="checkbox-item">
                            <input type="checkbox" value="completed" onchange="updateStatusFilter()">
                            <span class="checkmark"></span>
                            <span class="checkbox-text">Completed</span>
                        </label>
                        <label class="checkbox-item">
                            <input type="checkbox" value="cancelled" onchange="updateStatusFilter()">
                            <span class="checkmark"></span>
                            <span class="checkbox-text">Cancelled</span>
                        </label>
                    </div>
                </div>
                
                <label class="filter-label">Review Status:</label>
                <select class="filter-dropdown" id="reviewFilter">
                    <option value="">All Reviews</option>
                    <option value="reviewed">Reviewed</option>
                    <option value="not-reviewed">Not Reviewed</option>
                </select>
                
                <input type="text" class="search-box" id="searchBox" placeholder="Search actions, dates, or assignees...">
                
                <button class="clear-filters-btn" onclick="clearFilters()">
                    <svg width="14" height="14" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                    Clear Filters
                </button>
            </div>
        </div>

        <!-- Actions Table -->
        <div class="actions-table-container">
            <table class="actions-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Description</th>
                        <th>Assignee</th>
                        <th class="sortable" data-sort="due_date">
                            <span class="header-content">
                                <span class="header-text">Due Date</span>
                                <svg class="sort-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M7 14L12 9L17 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </span>
                        </th>
                        <th class="sortable" data-sort="created_at">
                            <span class="header-content">
                                <span class="header-text">Created At</span>
                                <svg class="sort-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M7 14L12 9L17 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </span>
                        </th>
                        <th class="sortable" data-sort="status">
                            <span class="header-content">
                                <span class="header-text">Status</span>
                                <svg class="sort-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M7 14L12 9L17 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                            </span>
                        </th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="actionsTableBody">
                    {% for action in actions %}
                    <tr data-status="{{ action.status }}" 
                        data-description="{{ action.description|lower }}" 
                        data-created-at="{{ action.createdAt|date('Y-m-d') }}"
                        data-assignee="{{ action.assignedTo ? action.assignedTo.email|lower : '' }}"
                        data-review="{{ action.isReviewed ? 'reviewed' : 'not-reviewed' }}"
                        data-action-id="{{ action.id }}"
                        {% if action.isReviewed %}class="reviewed"{% endif %}>
                        <td>
                            <span class="action-id">#{{ action.id }}</span>
                        </td>
                        <td>
                            <div class="action-description-container">
                                <div class="action-description" onclick="editActionDescription({{ action.id }})" id="action-text-{{ action.id }}">
                                    {{ action.description }}
                                </div>
                                <div class="action-edit-form" id="action-edit-{{ action.id }}" style="display: none;">
                                    <textarea class="action-edit-textarea" id="text-{{ action.id }}" rows="3">{{ action.description }}</textarea>
                                    <div class="action-edit-actions">
                                        <button class="btn btn-sm btn-success save-action-btn" onclick="saveActionDescription({{ action.id }})">
                                            <svg width="14" height="14" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                            </svg>
                                            Save
                                        </button>
                                        <button class="btn btn-sm btn-secondary cancel-action-btn" onclick="cancelEditActionDescription({{ action.id }})">
                                            <svg width="14" height="14" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                                            </svg>
                                            Cancel
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </td>
                        <td>
                            {% if action.assignedTo %}
                                <div class="assignee-info">
                                    <div class="assignee-avatar">
                                        {{ action.assignedTo.email|slice(0,1)|upper }}
                                    </div>
                                    <span class="assignee-name">{{ action.assignedTo.email }}</span>
                                </div>
                            {% else %}
                                <span style="color: #9ca3af; font-style: italic;">Unassigned</span>
                            {% endif %}
                        </td>
                        <td>
                            {% if action.dueDate %}
                                {% set dueDateStr = action.dueDate|date('Y-m-d') %}
                                {% set nowStr = 'now'|date('Y-m-d') %}
                                {% set diffDays = (action.dueDate.timestamp - 'now'|date('U'))/86400 %}
                                <span class="due-date {% if dueDateStr < nowStr and action.status != 'completed' %}overdue{% elseif diffDays <= 3 and diffDays >= 0 %}due-soon{% else %}normal{% endif %}">
                                    {{ action.dueDate|date('M d, Y') }}
                                </span>
                            {% else %}
                                <span style="color: #9ca3af;">No due date</span>
                            {% endif %}
                        </td>
                        <td class="created-at-cell">
                            <span class="created-at-text">{{ action.createdAt|date('M d, Y H:i') }}</span>
                        </td>
                        <td>
                            <span class="status-badge {{ action.status }}">{{ action.status|replace({'-': ' '})|title }}</span>
                        </td>
                        <td>
                            <div class="action-actions">
                                <button class="btn btn-sm btn-info action-details-btn" 
                                        onclick="showActionDetails({{ action.id }})"
                                        style="padding: 0.375rem 0.75rem; border-radius: 6px; font-size: 0.75rem; display: flex; align-items: center; gap: 0.25rem;">
                                    <svg width="14" height="14" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
                                    </svg>
                                    Details
                                </button>
                                <button class="btn btn-sm btn-danger action-delete-btn" 
                                        onclick="confirmDeleteAction({{ action.id }})"
                                        style="padding: 0.375rem 0.75rem; border-radius: 6px; font-size: 0.75rem; display: flex; align-items: center; gap: 0.25rem;">
                                    <svg width="14" height="14" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                    </svg>
                                    Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    {% else %}
        <!-- Empty State -->
        <div class="empty-state">
            <div class="empty-state-icon">
                <svg width="64" height="64" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" clip-rule="evenodd"></path>
                </svg>
            </div>
            <h3>No Actions Found</h3>
            <p>{% if team %}No action items found for {{ team.name }} yet.{% else %}No action items found{% endif %} Create retrospectives and add action items to start tracking progress.</p>
        </div>
    {% endif %}

    <!-- Pagination Controls -->
    {% if pagination.total_pages > 1 %}
        <div class="pagination-container">
            <div class="pagination-info">
                Showing {{ ((pagination.current_page - 1) * pagination.items_per_page) + 1 }} to 
                {{ pagination.current_page == pagination.total_pages ? pagination.total_items : pagination.current_page * pagination.items_per_page }} 
                of {{ pagination.total_items }} actions
            </div>
            
            <div class="pagination-controls">
                {% if pagination.has_previous %}
                    <a href="{{ path('app_actions_by_team', {teamId: team.id, page: pagination.current_page - 1, status: filterStatus, sort: pagination.sort, direction: pagination.direction}) }}" 
                       class="pagination-btn pagination-prev">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        Previous
                    </a>
                {% else %}
                    <span class="pagination-btn pagination-disabled">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        Previous
                    </span>
                {% endif %}

                <div class="pagination-pages">
                    {% set start_page = max(1, pagination.current_page - 2) %}
                    {% set end_page = min(pagination.total_pages, pagination.current_page + 2) %}
                    
                    {% if start_page > 1 %}
                        <a href="{{ path('app_actions_by_team', {teamId: team.id, page: 1, status: filterStatus, sort: pagination.sort, direction: pagination.direction}) }}" 
                           class="pagination-page">1</a>
                        {% if start_page > 2 %}
                            <span class="pagination-ellipsis">...</span>
                        {% endif %}
                    {% endif %}

                    {% for page_num in start_page..end_page %}
                        <a href="{{ path('app_actions_by_team', {teamId: team.id, page: page_num, status: filterStatus, sort: pagination.sort, direction: pagination.direction}) }}" 
                           class="pagination-page {{ page_num == pagination.current_page ? 'pagination-active' : '' }}">
                           {{ page_num }}
                        </a>
                    {% endfor %}

                    {% if end_page < pagination.total_pages %}
                        {% if end_page < pagination.total_pages - 1 %}
                            <span class="pagination-ellipsis">...</span>
                        {% endif %}
                        <a href="{{ path('app_actions_by_team', {teamId: team.id, page: pagination.total_pages, status: filterStatus, sort: pagination.sort, direction: pagination.direction}) }}" 
                           class="pagination-page">{{ pagination.total_pages }}</a>
                    {% endif %}
                </div>

                {% if pagination.has_next %}
                    <a href="{{ path('app_actions_by_team', {teamId: team.id, page: pagination.current_page + 1, status: filterStatus, sort: pagination.sort, direction: pagination.direction}) }}" 
                       class="pagination-btn pagination-next">
                        Next
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </a>
                {% else %}
                    <span class="pagination-btn pagination-disabled">
                        Next
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </span>
                {% endif %}
            </div>

            <div class="pagination-size">
                <label for="itemsPerPage">Items per page:</label>
                <select id="itemsPerPage" onchange="changeItemsPerPage(this.value)">
                    <option value="10" {{ pagination.items_per_page == 10 ? 'selected' : '' }}>10</option>
                    <option value="25" {{ pagination.items_per_page == 25 ? 'selected' : '' }}>25</option>
                    <option value="50" {{ pagination.items_per_page == 50 ? 'selected' : '' }}>50</option>
                    <option value="100" {{ pagination.items_per_page == 100 ? 'selected' : '' }}>100</option>
                </select>
            </div>
        </div>
    {% endif %}

    <!-- Action Details Modal -->
    <div class="action-modal-overlay" id="actionModal">
        <div class="action-modal-content">
            <div class="action-modal-header">
                <h3>Action Details</h3>
                <button class="action-modal-close" onclick="closeActionModal()">×</button>
            </div>
            <div class="action-modal-body" id="actionModalBody">
                <!-- Content will be loaded via AJAX -->
            </div>
        </div>
    </div>
    </div> <!-- End page-content -->
</div>

<!-- Confirmation Modal -->
<div id="confirmModal" class="confirm-modal">
    <div class="confirm-modal-content">
        <div class="confirm-modal-header">
            <div class="confirm-modal-icon">!</div>
            <h3 class="confirm-modal-title" id="confirmModalTitle">Delete Action</h3>
        </div>
        <div class="confirm-modal-body" id="confirmModalBody">
            Are you sure you want to delete this action? This action cannot be undone.
        </div>
        <div class="confirm-modal-footer">
            <button class="confirm-modal-btn confirm-modal-btn-cancel" id="confirmModalCancel">Cancel</button>
            <button class="confirm-modal-btn confirm-modal-btn-confirm" id="confirmModalConfirm">Delete</button>
        </div>
    </div>
</div>

<script>
    // Filter functions
    function filterTable() {
        const statusCheckboxes = document.querySelectorAll('#statusDropdownMenu input[type="checkbox"]');
        const reviewFilter = document.getElementById('reviewFilter');
        const searchBox = document.getElementById('searchBox');
        const tableRows = document.querySelectorAll('#actionsTableBody tr');
        
        // Get selected status values from checkboxes
        const selectedStatuses = Array.from(statusCheckboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);
        
        const reviewValue = reviewFilter ? reviewFilter.value : '';
        const searchValue = searchBox ? searchBox.value.toLowerCase().trim() : '';
        
        tableRows.forEach(row => {
            const status = row.getAttribute('data-status');
            const review = row.getAttribute('data-review');
            const description = row.getAttribute('data-description');
            const createdAt = row.getAttribute('data-created-at');
            const assignee = row.getAttribute('data-assignee');
            
            let showRow = true;
            
            // Filter by status (checkboxes)
            if (selectedStatuses.length > 0 && !selectedStatuses.includes(status)) {
                showRow = false;
            }
            
            // Filter by review status
            if (reviewValue && review !== reviewValue) {
                showRow = false;
            }
            
            // Filter by search term
            if (searchValue) {
                const searchMatch = description.includes(searchValue) ||
                                 assignee.includes(searchValue) ||
                                 (createdAt && searchValue.match(/\d/) && createdAt.includes(searchValue));
                if (!searchMatch) {
                    showRow = false;
                }
            }
            
            row.style.display = showRow ? '' : 'none';
        });
    }

    function clearFilters() {
        const statusCheckboxes = document.querySelectorAll('#statusDropdownMenu input[type="checkbox"]');
        const reviewFilter = document.getElementById('reviewFilter');
        const searchBox = document.getElementById('searchBox');
        
        // Clear all checkboxes
        statusCheckboxes.forEach(checkbox => checkbox.checked = false);
        
        // Update dropdown text
        updateStatusDropdownText();
        
        if (reviewFilter) reviewFilter.value = '';
        if (searchBox) searchBox.value = '';
        
        filterTable();
    }

    // Custom dropdown functions
    function toggleStatusDropdown() {
        const dropdown = document.getElementById('statusDropdownMenu');
        const toggle = document.getElementById('statusDropdownToggle');
        
        if (dropdown.classList.contains('show')) {
            dropdown.classList.remove('show');
            toggle.classList.remove('active');
        } else {
            dropdown.classList.add('show');
            toggle.classList.add('active');
        }
    }

    function updateStatusFilter() {
        updateStatusDropdownText();
        filterTable();
    }

    function updateStatusDropdownText() {
        const checkboxes = document.querySelectorAll('#statusDropdownMenu input[type="checkbox"]');
        const selectedCheckboxes = Array.from(checkboxes).filter(checkbox => checkbox.checked);
        const textElement = document.getElementById('statusDropdownText');
        
        if (selectedCheckboxes.length === 0) {
            textElement.textContent = 'All Status';
        } else if (selectedCheckboxes.length === 1) {
            textElement.textContent = selectedCheckboxes[0].nextElementSibling.nextElementSibling.textContent;
        } else {
            textElement.textContent = `${selectedCheckboxes.length} selected`;
        }
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        const statusDropdown = document.getElementById('statusDropdown');
        
        if (!event.target.closest('#statusDropdown')) {
            const dropdown = document.getElementById('statusDropdownMenu');
            const toggle = document.getElementById('statusDropdownToggle');
            dropdown.classList.remove('show');
            toggle.classList.remove('active');
        }
    });

    // Initialize filters
    document.addEventListener('DOMContentLoaded', function() {
        const reviewFilter = document.getElementById('reviewFilter');
        const searchBox = document.getElementById('searchBox');
        
        if (reviewFilter) {
            reviewFilter.addEventListener('change', filterTable);
        }
        
        if (searchBox) {
            searchBox.addEventListener('input', filterTable);
        }
        
        // Initial filter applied
        setTimeout(filterTable, 100);
    });

    // Action management functions

    function editActionDescription(actionId) {
        const actionText = document.getElementById(`action-text-${actionId}`);
        const actionEditForm = document.getElementById(`action-edit-${actionId}`);
        const editTextarea = document.getElementById(`text-${actionId}`);
        
        // Hide the text, show the form
        actionText.style.display = 'none';
        actionEditForm.style.display = 'block';
        
        // Focus and select the textarea
        editTextarea.focus();
        editTextarea.select();
        
        // Store original text for cancel functionality
        editTextarea.dataset.originalValue = editTextarea.value;
    }

    function cancelEditActionDescription(actionId) {
        const actionText = document.getElementById(`action-text-${actionId}`);
        const actionEditForm = document.getElementById(`action-edit-${actionId}`);
        const editTextarea = document.getElementById(`text-${actionId}`);
        
        // Restore original value
        editTextarea.value = editTextarea.dataset.originalValue;
        
        // Hide form, show text
        actionEditForm.style.display = 'none';
        actionText.style.display = 'block';
    }

    function saveActionDescription(actionId) {
        const actionText = document.getElementById(`action-text-${actionId}`);
        const actionEditForm = document.getElementById(`action-edit-${actionId}`);
        const editTextarea = document.getElementById(`text-${actionId}`);
        const saveBtn = document.querySelector(`#action-edit-${actionId} .save-action-btn`);
        
        const newDescription = editTextarea.value.trim();
        
        if (!newDescription) {
            showMessage('Description cannot be empty', 'error');
            return;
        }
        
        // Disable save button during request
        saveBtn.disabled = true;
        saveBtn.innerHTML = `
            <div style="width: 20px; height: 20px; border: 2px solid #ffffff40; border-top: 2px solid #ffffff; border-radius: 50%; animation: spin 1s linear infinite;"></div>
            Saving...
        `;
        
        // Send update request
        fetch(`/actions/${actionId}/edit-description`, {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ description: newDescription })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update the text display
                actionText.textContent = newDescription;
                
                // Hide form, show text
                actionEditForm.style.display = 'none';
                actionText.style.display = 'block';
                
                showMessage(data.message || 'Action updated successfully', 'success');
                
                // Update data-description for filtering
                const tableRow = actionText.closest('tr');
                tableRow.setAttribute('data-description', newDescription.toLowerCase());
            } else {
                showMessage(data.message || 'Error updating action', 'error');
            }
        })
        .catch(error => {
            console.error('Error updating action:', error);
            showMessage('Error updating action. Please try again.', 'error');
        })
        .finally(() => {
            // Reset save button
            saveBtn.disabled = false;
            saveBtn.innerHTML = `
                <svg width="14" height="14" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
                Save
            `;
        });
    }

    function saveModalActionDescription(actionId) {
        const modalTextarea = document.getElementById(`modal-text-${actionId}`);
        const saveBtn = document.querySelector(`#modal-text-${actionId}`).closest('.action-detail-group').querySelector('.save-action-btn');
        
        const newDescription = modalTextarea.value.trim();
        
        if (!newDescription) {
            showMessage('Description cannot be empty', 'error');
            return;
        }
        
        // Disable save button during request
        saveBtn.disabled = true;
        saveBtn.innerHTML = `
            <div style="width: 20px; height: 20px; border: 2px solid #ffffff40; border-top: 2px solid #ffffff; border-radius: 50%; animation: spin 1s linear infinite;"></div>
            Saving...
        `;
        
        // Send update request
        fetch(`/actions/${actionId}/edit-description`, {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ description: newDescription })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(data.message || 'Action updated successfully', 'success');
                
                // Switch back to view mode
                const modalView = document.getElementById(`modal-view-${actionId}`);
                const modalEdit = document.getElementById(`modal-edit-${actionId}`);
                
                // Update the text in view mode
                modalView.textContent = newDescription;
                
                // Hide edit form, show updated view
                modalEdit.style.display = 'none';
                modalView.style.display = 'block';
                
                // Also update the table if it exists
                const tableText = document.getElementById(`action-text-${actionId}`);
                if (tableText) {
                    tableText.textContent = newDescription;
                    const tableRow = tableText.closest('tr');
                    tableRow.setAttribute('data-description', newDescription.toLowerCase());
                }
            } else {
                showMessage(data.message || 'Error updating action', 'error');
            }
        })
        .catch(error => {
            console.error('Error updating action:', error);
            showMessage('Error updating action. Please try again.', 'error');
        })
        .finally(() => {
            // Reset save button
            saveBtn.disabled = false;
            saveBtn.innerHTML = `
                <svg width="14" height="14" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
                Save Changes
            `;
        });
    }

    function editModalActionDescription(actionId) {
        const modalView = document.getElementById(`modal-view-${actionId}`);
        const modalEdit = document.getElementById(`modal-edit-${actionId}`);
        const modalTextarea = document.getElementById(`modal-text-${actionId}`);
        
        // Hide the view, show the edit form
        modalView.style.display = 'none';
        modalEdit.style.display = 'block';
        
        // Focus and select the textarea
        modalTextarea.focus();
        modalTextarea.select();
        
        // Store original value for cancel functionality
        modalTextarea.dataset.originalValue = modalTextarea.value;
    }

    function cancelModalActionDescription(actionId) {
        const modalView = document.getElementById(`modal-view-${actionId}`);
        const modalEdit = document.getElementById(`modal-edit-${actionId}`);
        const modalTextarea = document.getElementById(`modal-text-${actionId}`);
        
        // Restore original value
        modalTextarea.value = modalTextarea.dataset.originalValue;
        
        // Hide edit form, show view
        modalEdit.style.display = 'none';
        modalView.style.display = 'block';
    }

    function editModalActionStatus(actionId) {
        const modalStatusView = document.getElementById(`modal-status-view-${actionId}`);
        const modalStatusEdit = document.getElementById(`modal-status-edit-${actionId}`);
        
        // Hide the view, show the edit form
        modalStatusView.style.display = 'none';
        modalStatusEdit.style.display = 'inline-flex';
        
        // Focus on the select
        document.getElementById(`modal-status-select-${actionId}`).focus();
    }

    function cancelModalActionStatus(actionId) {
        const modalStatusView = document.getElementById(`modal-status-view-${actionId}`);
        const modalStatusEdit = document.getElementById(`modal-status-edit-${actionId}`);
        
        // Hide edit form, show view
        modalStatusEdit.style.display = 'none';
        modalStatusView.style.display = 'inline-flex';
    }

    function saveModalActionStatus(actionId) {
        const newStatus = document.getElementById(`modal-status-select-${actionId}`).value;
        const modalStatusView = document.getElementById(`modal-status-view-${actionId}`);
        const modalStatusEdit = document.getElementById(`modal-status-edit-${actionId}`);
        
        // Send update request
        fetch(`/actions/${actionId}/update-status`, {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ status: newStatus })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(data.message || 'Status updated successfully', 'success');
                
                // Update the badge text and class
                const badge = modalStatusView.querySelector('.status-badge');
                badge.className = `status-badge ${newStatus}`;
                badge.textContent = newStatus.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase());
                
                // Switch back to view mode
                modalStatusEdit.style.display = 'none';
                modalStatusView.style.display = 'inline-flex';
                
                // Also update the table if it exists
                const tableRow = document.querySelector(`[data-action-id="${actionId}"]`);
                if (tableRow) {
                    const tableBadge = tableRow.querySelector('.status-badge');
                    if (tableBadge) {
                        tableBadge.className = `status-badge ${newStatus}`;
                        tableBadge.textContent = newStatus.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase());
                    }
                    tableRow.setAttribute('data-status', newStatus);
                    
                    // Update filter counts
                    if (typeof filterTable === 'function') {
                        filterTable();
                    }
                }
            } else {
                showMessage(data.message || 'Error updating status', 'error');
            }
        })
        .catch(error => {
            console.error('Error updating status:', error);
            showMessage('Error updating status. Please try again.', 'error');
            // Switch back to view mode on error
            cancelModalActionStatus(actionId);
        });
    }

    function editModalDueDate(actionId) {
        const modalDueDateView = document.getElementById(`modal-due-date-view-${actionId}`);
        const modalDueDateEdit = document.getElementById(`modal-due-date-edit-${actionId}`);
        
        // Hide the view, show the edit form
        modalDueDateView.style.display = 'none';
        modalDueDateEdit.style.display = 'inline-flex';
        
        // Focus on the date input
        document.getElementById(`modal-due-date-input-${actionId}`).focus();
    }

    function cancelModalDueDate(actionId) {
        const modalDueDateView = document.getElementById(`modal-due-date-view-${actionId}`);
        const modalDueDateEdit = document.getElementById(`modal-due-date-edit-${actionId}`);
        
        // Hide edit form, show view
        modalDueDateEdit.style.display = 'none';
        modalDueDateView.style.display = 'inline-flex';
        
        // Reset the input value to original
        const input = document.getElementById(`modal-due-date-input-${actionId}`);
        input.value = input.getAttribute('data-original-value') || '';
    }

    function saveModalDueDate(actionId) {
        const newDueDate = document.getElementById(`modal-due-date-input-${actionId}`).value;
        const modalDueDateView = document.getElementById(`modal-due-date-view-${actionId}`);
        const modalDueDateEdit = document.getElementById(`modal-due-date-edit-${actionId}`);
        
        // Send update request
        fetch(`/actions/${actionId}/update-due-date`, {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ due_date: newDueDate })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(data.message || 'Due date updated successfully', 'success');
                
                // Update the view text
                const viewSpan = modalDueDateView.querySelector('span');
                if (newDueDate) {
                    const date = new Date(newDueDate);
                    viewSpan.textContent = date.toLocaleDateString('en-US', { 
                        weekday: 'long', 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                    });
                    viewSpan.style.color = '';
                } else {
                    viewSpan.textContent = 'No due date set';
                    viewSpan.style.color = '#9ca3af';
                }
                
                // Switch back to view mode
                modalDueDateEdit.style.display = 'none';
                modalDueDateView.style.display = 'inline-flex';
                
                // Also update the table if it exists
                const tableRow = document.querySelector(`[data-action-id="${actionId}"]`);
                if (tableRow) {
                    const dueDateCell = tableRow.querySelector('.due-date-cell');
                    if (dueDateCell) {
                        if (newDueDate) {
                            const date = new Date(newDueDate);
                            dueDateCell.innerHTML = `
                                <span class="status-badge ${getDateStatusClass(newDueDate)}">${date.toLocaleDateString('en-US', { 
                                    month: 'short', 
                                    day: 'numeric', 
                                    year: 'numeric' 
                                })}</span>
                            `;
                        } else {
                            dueDateCell.innerHTML = '<span style="color: #9ca3af;">-</span>';
                        }
                    }
                }
                
                // Update filter counts
                if (typeof filterTable === 'function') {
                    filterTable();
                }
            } else {
                showMessage(data.message || 'Error updating due date', 'error');
            }
        })
        .catch(error => {
            console.error('Error updating due date:', error);
            showMessage('Error updating due date. Please try again.', 'error');
            // Switch back to view mode on error
            cancelModalDueDate(actionId);
        });
    }

    function editModalAssignee(actionId) {
        const modalAssigneeView = document.getElementById(`modal-assignee-view-${actionId}`);
        const modalAssigneeEdit = document.getElementById(`modal-assignee-edit-${actionId}`);
        
        // Hide the view, show the edit form
        modalAssigneeView.style.display = 'none';
        modalAssigneeEdit.style.display = 'flex';
        
        // Focus on the select
        document.getElementById(`modal-assignee-select-${actionId}`).focus();
    }

    function cancelModalAssignee(actionId) {
        const modalAssigneeView = document.getElementById(`modal-assignee-view-${actionId}`);
        const modalAssigneeEdit = document.getElementById(`modal-assignee-edit-${actionId}`);
        const select = document.getElementById(`modal-assignee-select-${actionId}`);
        
        // Reset the select value to original
        select.value = select.getAttribute('data-original-value') || '';
        
        // Hide edit form, show view
        modalAssigneeEdit.style.display = 'none';
        modalAssigneeView.style.display = 'block';
    }

    function saveModalAssignee(actionId) {
        const newAssigneeId = document.getElementById(`modal-assignee-select-${actionId}`).value;
        const modalAssigneeView = document.getElementById(`modal-assignee-view-${actionId}`);
        const modalAssigneeEdit = document.getElementById(`modal-assignee-edit-${actionId}`);
        
        // Send update request
        fetch(`/actions/${actionId}/update-assignee`, {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ assigned_to_id: newAssigneeId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(data.message || 'Assignee updated successfully', 'success');
                
                // Update the view content
                if (data.assignee) {
                    modalAssigneeView.innerHTML = `
                        <div class="action-assignee-detail">
                            <div class="action-assignee-avatar">
                                ${data.assignee.email.charAt(0).toUpperCase()}
                            </div>
                            <div class="action-assignee-info">
                                <div class="action-assignee-name">${data.assignee.email}</div>
                                <div class="action-assignee-role">${data.assignee.is_owner ? 'Team Owner' : 'Team Member'}</div>
                            </div>
                            <svg width="12" height="12" fill="currentColor" viewBox="0 0 20 20" style="margin-left: 8px;">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    `;
                } else {
                    modalAssigneeView.innerHTML = `
                        <div style="color: #9ca3af; font-style: italic; padding: 1rem; background: #f9fafb; border-radius: 8px; display: flex; align-items: center;">
                            No one assigned to this action
                            <svg width="12" height="12" fill="currentColor" viewBox="0 0 20 20" style="margin-left: 8px;">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    `;
                }
                
                // Add the onclick handler back
                modalAssigneeView.onclick = function() { editModalAssignee(actionId); };
                
                // Switch back to view mode
                modalAssigneeEdit.style.display = 'none';
                modalAssigneeView.style.display = 'block';
                
                // Also update the table if it exists
                const tableRow = document.querySelector(`[data-action-id="${actionId}"]`);
                if (tableRow) {
                    const assigneeCell = tableRow.querySelector('.assignee-cell');
                    if (assigneeCell) {
                        if (data.assignee) {
                            assigneeCell.innerHTML = `<span class="text-primary">${data.assignee.email}</span>`;
                        } else {
                            assigneeCell.innerHTML = '<span style="color: #9ca3af;">-</span>';
                        }
                    }
                }
                
                // Update filter counts - this might affect overdue counts
                if (typeof filterTable === 'function') {
                    filterTable();
                }
            } else {
                showMessage(data.message || 'Error updating assignee', 'error');
            }
        })
        .catch(error => {
            console.error('Error updating assignee:', error);
            showMessage('Error updating assignee. Please try again.', 'error');
            // Switch back to view mode on error
            cancelModalAssignee(actionId);
        });
    }

    function showActionDetails(actionId) {
        const modal = document.getElementById('actionModal');
        const modalBody = document.getElementById('actionModalBody');
        
        // Show modal immediately with loading state
        modal.classList.add('show');
        modalBody.innerHTML = `
            <div style="text-align: center; padding: 2rem;">
                <div style="width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #667eea; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 1rem auto;"></div>
                <p style="color: #6b7280;">Loading action details...</p>
            </div>
        `;
        
        // Add CSS for spinner animation if not already present
        if (!document.querySelector('#spinnerCSS')) {
            const style = document.createElement('style');
            style.id = 'spinnerCSS';
            style.textContent = '@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }';
            document.head.appendChild(style);
        }
        
        // Fetch action details
        fetch(`/actions/${actionId}/details`, {
            method: 'GET',
            credentials: 'include',
            headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                modalBody.innerHTML = data.html;
            } else {
                modalBody.innerHTML = `
                    <div style="text-align: center; padding: 2rem; color: #ef4444;">
                        <h3>Error</h3>
                        <p>Unable to load action details: ${data.message || 'Unknown error'}</p>
                        <button onclick="closeActionModal()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: #667eea; color: white; border: none; border-radius: 6px; cursor: pointer;">Close</button>
                    </div>
                `;
            }
        })
        .catch(error => {
            console.error('Error loading action details:', error);
            modalBody.innerHTML = `
                <div style="text-align: center; padding: 2rem; color: #ef4444;">
                    <h3>Error</h3>
                    <p>Unable to load action details. Please try again.</p>
                    <button onclick="closeActionModal()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: #667eea; color: white; border: none; border-radius: 6px; cursor: pointer;">Close</button>
                </div>
            `;
        });
    }

    function closeActionModal() {
        const modal = document.getElementById('actionModal');
        modal.classList.remove('show');
        // Clear modal content to prevent stale data from showing
        setTimeout(() => {
            document.getElementById('actionModalBody').innerHTML = '';
        }, 300);
    }

    // Close modal when clicking outside
    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById('actionModal');
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                closeActionModal();
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && modal.classList.contains('show')) {
                closeActionModal();
            }
        });
    });

    function showMessage(message, type) {
        // Create message element
        const messageEl = document.createElement('div');
        messageEl.className = `alert alert-${type}`;
        messageEl.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            animation: slideInRight 0.3s ease;
            max-width: 400px;
            word-wrap: break-word;
        `;
        
        if (type === 'success') {
            messageEl.style.background = '#10b981';
            messageEl.style.border = '1px solid #059669';
        } else if (type === 'error') {
            messageEl.style.background = '#ef4444';
            messageEl.style.border = '1px solid #dc2626';
        }
        
        messageEl.textContent = message;
        
        // Add CSS animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
        
        // Add to page
        document.body.appendChild(messageEl);
        
        // Remove after 4 seconds
        setTimeout(() => {
            messageEl.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => {
                if (messageEl.parentNode) {
                    messageEl.parentNode.removeChild(messageEl);
                }
            }, 300);
        }, 4000);
    }

    // Add CSS for spinner animation
    const spinnerStyle = document.createElement('style');
    spinnerStyle.textContent = `
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(spinnerStyle);

    // Pagination functionality
    function changeItemsPerPage(newLimit) {
        const currentUrl = new URL(window.location);
        currentUrl.searchParams.set('limit', newLimit);
        currentUrl.searchParams.set('page', '1'); // Reset to first page when changing limit
        window.location.href = currentUrl.toString();
    }

    // Sorting functionality
    function sortTable(sortField) {
        const currentUrl = new URL(window.location);
        const currentSort = currentUrl.searchParams.get('sort') || 'created_at';
        const currentDirection = currentUrl.searchParams.get('direction') || 'desc';
        
        // Determine new direction
        let newDirection = 'desc';
        if (currentSort === sortField && currentDirection === 'desc') {
            newDirection = 'asc';
        }
        
        currentUrl.searchParams.set('sort', sortField);
        currentUrl.searchParams.set('direction', newDirection);
        currentUrl.searchParams.set('page', '1'); // Reset to first page when sorting
        
        window.location.href = currentUrl.toString();
    }

    // Initialize sorting icons state
    document.addEventListener('DOMContentLoaded', function() {
        const sortableHeaders = document.querySelectorAll('.sortable');
        const currentSort = '{{ sortField }}' || 'created_at';
        const currentDirection = '{{ sortDirection }}' || 'desc';
        
        sortableHeaders.forEach(header => {
            const dataSort = header.getAttribute('data-sort');
            header.style.cursor = 'pointer';
            
            // Add click handler
            header.addEventListener('click', function() {
                sortTable(dataSort);
            });
            
            // Update icon based on current sort state
            const icon = header.querySelector('.sort-icon');
            if (dataSort === currentSort) {
                icon.style.stroke = '#667eea';
                header.classList.add('active');
                // Add direction class for proper rotation
                header.classList.add(`sort-${currentDirection}`);
                // Rotate icon based on direction
                if (currentDirection === 'asc') {
                    header.classList.add('sort-asc');
                    header.classList.remove('sort-desc');
                } else {
                    header.classList.add('sort-desc');
                    header.classList.remove('sort-asc');
                }
            } else {
                icon.style.stroke = '#9ca3af';
                header.classList.remove('active', 'sort-asc', 'sort-desc');
            }
        });
    });

    // Actions dropdown functions
    function toggleActionsDropdown() {
        const dropdown = document.getElementById('actionsDropdown');
        const toggle = document.querySelector('.actions-dropdown-toggle');
        
        if (dropdown.classList.contains('show')) {
            dropdown.classList.remove('show');
            toggle.classList.remove('active');
        } else {
            dropdown.classList.add('show');
            toggle.classList.add('active');
        }
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        const dropdown = document.getElementById('actionsDropdown');
        const toggle = document.querySelector('.actions-dropdown-toggle');
        
        if (!event.target.closest('.actions-dropdown')) {
            dropdown.classList.remove('show');
            toggle.classList.remove('active');
        }
    });

    // Reset reviewed actions function
    function resetReviewedActions() {
        const modal = document.getElementById('confirmModal');
        const titleEl = document.getElementById('confirmModalTitle');
        const bodyEl = document.getElementById('confirmModalBody');
        const cancelBtn = document.getElementById('confirmModalCancel');
        const confirmBtn = document.getElementById('confirmModalConfirm');
        
        // Set modal content
        titleEl.textContent = 'Reset Reviewed Actions';
        bodyEl.innerHTML = 'Are you sure you want to reset all reviewed actions?';
        
        // Show modal
        modal.classList.add('active');
        
        // Remove existing event listeners
        const newCancelBtn = cancelBtn.cloneNode(true);
        const newConfirmBtn = confirmBtn.cloneNode(true);
        cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);
        confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
        
        // Add new event listeners
        newCancelBtn.addEventListener('click', function() {
            modal.classList.remove('active');
        });
        
        newConfirmBtn.addEventListener('click', function() {
            modal.classList.remove('active');
            performResetReviewedActions();
        });
    }

    function performResetReviewedActions() {
        // Close dropdown
        const dropdown = document.getElementById('actionsDropdown');
        const toggle = document.querySelector('.actions-dropdown-toggle');
        dropdown.classList.remove('show');
        toggle.classList.remove('active');

        // Show loading message
        showMessage('Resetting reviewed actions...', 'info');

        fetch('/actions/reset-reviewed', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(data.message || 'All reviewed actions have been reset successfully', 'success');
                
                // Update the table - remove reviewed class and update data-review attribute
                const reviewedRows = document.querySelectorAll('tr.reviewed');
                reviewedRows.forEach(row => {
                    row.classList.remove('reviewed');
                    row.setAttribute('data-review', 'not-reviewed');
                    
                    // Update any "Reviewed" status in footer to show "Mark as Reviewed" button
                    const reviewedStatus = row.querySelector('.reviewed-status');
                    if (reviewedStatus) {
                        const actionId = row.getAttribute('data-action-id');
                        reviewedStatus.outerHTML = `
                            <button class="btn btn-primary mark-reviewed-btn" onclick="markAsReviewed(${actionId})">
                                <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                </svg>
                                Mark as Reviewed
                            </button>
                        `;
                    }
                });
                
                // Refresh the page to update stats and ensure consistency
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                showMessage(data.message || 'Error resetting reviewed actions', 'error');
            }
        })
        .catch(error => {
            console.error('Error resetting reviewed actions:', error);
            showMessage('Error resetting reviewed actions. Please try again.', 'error');
        });
    }

    // Delete action functions
    function confirmDeleteAction(actionId) {
        const modal = document.getElementById('confirmModal');
        const titleEl = document.getElementById('confirmModalTitle');
        const bodyEl = document.getElementById('confirmModalBody');
        const cancelBtn = document.getElementById('confirmModalCancel');
        const confirmBtn = document.getElementById('confirmModalConfirm');
        
        // Set modal content
        titleEl.textContent = 'Delete Action';
        bodyEl.innerHTML = 'Are you sure you want to delete this action? This action cannot be undone.';
        
        // Show modal
        modal.classList.add('active');
        
        // Remove existing event listeners
        const newCancelBtn = cancelBtn.cloneNode(true);
        const newConfirmBtn = confirmBtn.cloneNode(true);
        cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);
        confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);
        
        // Add new event listeners
        newCancelBtn.addEventListener('click', function() {
            modal.classList.remove('active');
        });
        
        newConfirmBtn.addEventListener('click', function() {
            modal.classList.remove('active');
            deleteAction(actionId);
        });
    }

    function deleteAction(actionId) {
        const deleteBtn = document.querySelector(`[onclick="confirmDeleteAction(${actionId})"]`);
        const originalText = deleteBtn.innerHTML;
        
        // Disable button and show loading state
        deleteBtn.disabled = true;
        deleteBtn.innerHTML = `
            <div style="width: 14px; height: 14px; border: 2px solid #ffffff40; border-top: 2px solid #ffffff; border-radius: 50%; animation: spin 1s linear infinite;"></div>
            Deleting...
        `;
        
        fetch(`/actions/${actionId}/delete`, {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(data.message || 'Action deleted successfully', 'success');
                
                // Remove the table row
                const tableRow = document.querySelector(`tr[data-action-id="${actionId}"]`);
                if (tableRow) {
                    tableRow.remove();
                }
                
                // Refresh the page to update stats
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                showMessage(data.message || 'Error deleting action', 'error');
                deleteBtn.disabled = false;
                deleteBtn.innerHTML = originalText;
            }
        })
        .catch(error => {
            console.error('Error deleting action:', error);
            showMessage('Error deleting action. Please try again.', 'error');
            deleteBtn.disabled = false;
            deleteBtn.innerHTML = originalText;
        });
    }

    // Mark as reviewed function
    function markAsReviewed(actionId) {
        const button = document.querySelector(`[onclick="markAsReviewed(${actionId})"]`);
        const originalText = button.innerHTML;
        
        // Disable button and show loading state
        button.disabled = true;
        button.innerHTML = `
            <div style="width: 16px; height: 16px; border: 2px solid #ffffff40; border-top: 2px solid #ffffff; border-radius: 50%; animation: spin 1s linear infinite;"></div>
            Marking...
        `;
        
        fetch(`/actions/${actionId}/mark-reviewed`, {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(data.message || 'Action marked as reviewed successfully', 'success');
                
                // Replace button with reviewed status
                button.outerHTML = `
                    <div class="reviewed-status">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20" style="color: #10b981;">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        Reviewed
                    </div>
                `;
                
                // Add reviewed class and update data-review attribute to the table row
                const tableRow = document.querySelector(`tr[data-action-id="${actionId}"]`);
                if (tableRow) {
                    tableRow.classList.add('reviewed');
                    tableRow.setAttribute('data-review', 'reviewed');
                }
            } else {
                showMessage(data.message || 'Error marking action as reviewed', 'error');
                button.disabled = false;
                button.innerHTML = originalText;
            }
        })
        .catch(error => {
            console.error('Error marking action as reviewed:', error);
            showMessage('Error marking action as reviewed. Please try again.', 'error');
            button.disabled = false;
            button.innerHTML = originalText;
        });
    }
</script>
{% endblock %}